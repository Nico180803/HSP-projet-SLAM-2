{% extends 'base.html.twig' %}

{% block title %}HSP Chat - Groupe Hospitalier{% endblock %}

{% block body %}
<div class="chat-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-header">
            <div class="hospital-name">HSP Chat</div>
        </div>

        <div class="channels-section">
            <div class="section-title">üè• Canaux M√©dicaux</div>
            <ul class="channel-list">
                {% for channel in channels %}
                    <li class="channel-item" data-channel-id="{{ channel.id }}" data-channel-name="{{ channel.name }}">
                        <span class="channel-icon">
                            {% if channel.type == 'URGENCES' %}
                                üö®
                            {% elseif channel.type == 'FORMATION' %}
                                üìö
                            {% elseif channel.type == 'RECHERCHE' %}
                                üî¨
                            {% elseif channel.type == 'ADMINISTRATION' %}
                                üìã
                            {% else %}
                                üí¨
                            {% endif %}
                        </span>
                        <span class="channel-name">{{ channel.name }}</span>
                    </li>
                {% endfor %}
            </ul>

            <div class="section-title">üë• Utilisateurs En Ligne</div>
            <div class="online-users" id="online-users">
                {% for user in onlineUsers %}
                    <div class="user-item">
                        <div class="user-status"></div>
                        <div class="user-info-sidebar">
                            <div class="user-name">{{ user.fullName }}</div>
                            <div class="user-type-badge {{ user.userType|lower }}">{{ user.userType }}</div>
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>
    </div>

    <!-- Main Chat Area -->
    <div class="main-chat">
        <div class="chat-header">
            <div class="channel-info">
                <h2 id="current-channel-name">
                    <span id="channel-icon">üí¨</span>
                    <span>S√©lectionnez un canal</span>
                </h2>
                <div class="channel-description" id="current-channel-description">
                    Choisissez un canal pour commencer √† discuter
                </div>
            </div>
            <div class="user-info">
                <span>{{ currentUser.fullName }}</span>
                <span class="user-type-badge {{ currentUser.userType|lower }}">{{ currentUser.userType }}</span>
                <a href="{{ path('app_logout') }}" class="logout-btn">
                    üö™ D√©connexion
                </a>
            </div>
        </div>

        <div class="messages-container" id="messages-container">
            <div class="welcome-message">
                <h3>Bienvenue sur HSP Chat ! üëã</h3>
                <p>S√©lectionnez un canal dans la barre lat√©rale pour commencer √† discuter avec vos coll√®gues.</p>
            </div>
        </div>

        <div class="message-input-container">
            <form class="message-input-form" id="message-form">
                <input 
                    type="text" 
                    class="message-input" 
                    id="message-input" 
                    placeholder="Tapez votre message ici... (utilisez 'URGENT' pour les messages prioritaires)"
                    disabled
                >
                <button type="submit" class="send-button" id="send-button" disabled>
                    üì§ Envoyer
                </button>
            </form>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    let currentChannelId = null;
    let lastMessageTimestamp = 0;
    let pollInterval = null;

    const channelItems = document.querySelectorAll('.channel-item');
    const messagesContainer = document.getElementById('messages-container');
    const messageForm = document.getElementById('message-form');
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    const currentChannelName = document.getElementById('current-channel-name');
    const currentChannelDescription = document.getElementById('current-channel-description');
    const channelIcon = document.getElementById('channel-icon');

    // Fonction pour formater la date
    function formatTime(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffTime = Math.abs(now - date);
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        
        if (diffDays === 1) {
            return 'Aujourd\'hui ' + date.toLocaleTimeString('fr-FR', {hour: '2-digit', minute: '2-digit'});
        } else if (diffDays === 2) {
            return 'Hier ' + date.toLocaleTimeString('fr-FR', {hour: '2-digit', minute: '2-digit'});
        } else if (diffDays <= 7) {
            return date.toLocaleDateString('fr-FR', {weekday: 'short'}) + ' ' + date.toLocaleTimeString('fr-FR', {hour: '2-digit', minute: '2-digit'});
        }
        return date.toLocaleDateString('fr-FR') + ' ' + date.toLocaleTimeString('fr-FR', {hour: '2-digit', minute: '2-digit'});
    }

    // Fonction pour cr√©er un √©l√©ment message
    function createMessageElement(message) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message' + (message.type === 'urgent' ? ' urgent' : '');
        
        const senderBadge = message.sender.userType ? `<span class="user-type-badge ${message.sender.userType.toLowerCase()}">${message.sender.userType}</span>` : '';
        
        messageDiv.innerHTML = `
            <div class="message-header">
                <span class="sender-name">${message.sender.fullName}</span>
                ${senderBadge}
                <span class="message-time">${formatTime(message.createdAt)}</span>
                ${message.type === 'urgent' ? '<span style="color: #dc2626; font-weight: bold;">üö® URGENT</span>' : ''}
            </div>
            <div class="message-content">${message.content}</div>
        `;
        
        return messageDiv;
    }

    // S√©lection d'un canal
    channelItems.forEach(item => {
        item.addEventListener('click', function() {
            const channelId = this.dataset.channelId;
            const channelName = this.dataset.channelName;
            
            // Mise √† jour de l'interface
            channelItems.forEach(ch => ch.classList.remove('active'));
            this.classList.add('active');
            
            // Mise √† jour du header
            const icon = this.querySelector('.channel-icon').textContent;
            channelIcon.textContent = icon;
            currentChannelName.innerHTML = `<span id="channel-icon">${icon}</span> ${channelName}`;
            
            // Chargement des messages du canal
            loadChannel(channelId);
        });
    });

    // Chargement d'un canal
    function loadChannel(channelId) {
        currentChannelId = channelId;
        messagesContainer.innerHTML = '<div class="loading">Chargement des messages...</div>';
        
        fetch(`/channel/${channelId}`)
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    messagesContainer.innerHTML = `<div class="error-message">${data.error}</div>`;
                    return;
                }
                
                // Mise √† jour de la description
                currentChannelDescription.textContent = data.channel.description || 'Canal de communication';
                
                // Affichage des messages
                messagesContainer.innerHTML = '';
                data.messages.forEach(message => {
                    messagesContainer.appendChild(createMessageElement(message));
                });
                
                // Scroll vers le bas
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
                
                // Activation de l'input
                messageInput.disabled = false;
                sendButton.disabled = false;
                messageInput.placeholder = `Message #${data.channel.name}`;
                
                // Mise √† jour du timestamp
                if (data.messages.length > 0) {
                    lastMessageTimestamp = Math.floor(new Date(data.messages[data.messages.length - 1].createdAt).getTime() / 1000);
                }
                
                // D√©marrer le polling
                startPolling();
            })
            .catch(error => {
                console.error('Erreur:', error);
                messagesContainer.innerHTML = '<div class="error-message">Erreur lors du chargement des messages</div>';
            });
    }

    // Envoi de message
    messageForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const content = messageInput.value.trim();
        if (!content || !currentChannelId) return;
        
        sendButton.disabled = true;
        sendButton.textContent = 'Envoi...';
        
        fetch(`/channel/${currentChannelId}/message`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({content: content})
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                alert(data.error);
                return;
            }
            
            // Ajouter le message √† la liste
            messagesContainer.appendChild(createMessageElement(data));
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            
            // Vider l'input
            messageInput.value = '';
            
            // Mettre √† jour le timestamp
            lastMessageTimestamp = Math.floor(new Date(data.createdAt).getTime() / 1000);
        })
        .catch(error => {
            console.error('Erreur:', error);
            alert('Erreur lors de l\'envoi du message');
        })
        .finally(() => {
            sendButton.disabled = false;
            sendButton.textContent = 'üì§ Envoyer';
        });
    });

    // Polling pour les nouveaux messages
    function startPolling() {
        if (pollInterval) {
            clearInterval(pollInterval);
        }
        
        pollInterval = setInterval(() => {
            if (!currentChannelId || lastMessageTimestamp === 0) return;
            
            fetch(`/channel/${currentChannelId}/messages/since/${lastMessageTimestamp}`)
                .then(response => response.json())
                .then(data => {
                    if (data.messages && data.messages.length > 0) {
                        data.messages.forEach(message => {
                            messagesContainer.appendChild(createMessageElement(message));
                        });
                        messagesContainer.scrollTop = messagesContainer.scrollHeight;
                        lastMessageTimestamp = Math.floor(new Date(data.messages[data.messages.length - 1].createdAt).getTime() / 1000);
                    }
                })
                .catch(error => console.error('Erreur polling:', error));
        }, 3000); // Toutes les 3 secondes
    }

    // Polling pour les utilisateurs en ligne
    function updateOnlineUsers() {
        fetch('/users/online')
            .then(response => response.json())
            .then(data => {
                const onlineUsersContainer = document.getElementById('online-users');
                onlineUsersContainer.innerHTML = '';
                
                data.users.forEach(user => {
                    const userDiv = document.createElement('div');
                    userDiv.className = 'user-item';
                    userDiv.innerHTML = `
                        <div class="user-status"></div>
                        <div class="user-info-sidebar">
                            <div class="user-name">${user.fullName}</div>
                            <div class="user-type-badge ${user.userType.toLowerCase()}">${user.userType}</div>
                        </div>
                    `;
                    onlineUsersContainer.appendChild(userDiv);
                });
            })
            .catch(error => console.error('Erreur users:', error));
    }

    // Mise √† jour des utilisateurs en ligne toutes les 30 secondes
    setInterval(updateOnlineUsers, 30000);

    // Focus sur l'input
    messageInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            messageForm.dispatchEvent(new Event('submit'));
        }
    });
});
</script>
{% endblock %}